/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ScanDomain200ResponseInner
 */
export interface ScanDomain200ResponseInner {
    /**
     * A sanitized, registerable representation of the URL submitted. By registerable, we mean either the domain registerable with a domain registrar (e.g., example.com) or a sub-domain registerable on a hosting providers domain (e.g., my-project.vercel.app).
     * @type {string}
     * @memberof ScanDomain200ResponseInner
     */
    domain: string;
    /**
     * The status of our domain analysis. Since our analysis can take some time, rather than block the API request until we've finished, we schedule the evaluation and return a response immediately. 
     * 
     * PROCESSING -> The analysis is under way
     * UNPROCESSABLE -> We were unable to analyze the domain. This usually means that the website was unreachable or did not include valid HTML
     * PROCESSED -> Our analysis completed successfully
     * @type {string}
     * @memberof ScanDomain200ResponseInner
     */
    status: ScanDomain200ResponseInnerStatusEnum;
    /**
     * A risk score from 0.0 to 1.0. The higher the score, the higher our certainty that this domain is hosting a crypto-native scam.
     * @type {number}
     * @memberof ScanDomain200ResponseInner
     */
    riskScore: number;
    /**
     * Additional metadata about the domain and our evaluation. Possible labels include
     * 
     * Blockchain -> Which blockchain this domain attempts to interact with
     * Warning -> If we've detected scam-like behavior, a warning label describing what was found will be included. If we know which blockchain the scam dApp is built for, this information is also included. We reserve the right to add new warnings at any time so handle new additions gracefully.
     * Copy-cat -> If this dApp is a copy-cat of a well-known brand, we include a copy-cat label with information of the brand it is impersonating and it's official domain
     * @type {Array<string>}
     * @memberof ScanDomain200ResponseInner
     */
    labels: Array<ScanDomain200ResponseInnerLabelsEnum>;
}


/**
 * @export
 */
export const ScanDomain200ResponseInnerStatusEnum = {
    Processed: 'PROCESSED',
    Processing: 'PROCESSING',
    Unprocessable: 'UNPROCESSABLE'
} as const;
export type ScanDomain200ResponseInnerStatusEnum = typeof ScanDomain200ResponseInnerStatusEnum[keyof typeof ScanDomain200ResponseInnerStatusEnum];

/**
 * @export
 */
export const ScanDomain200ResponseInnerLabelsEnum = {
    Blockchainsolana: 'blockchain=solana',
    Blockchainethereum: 'blockchain=ethereum',
    Blockchainpolygon: 'blockchain=polygon',
    WarningAllBlocklistedDomainCrossOrigin: 'warning[all]=BLOCKLISTED_DOMAIN_CROSS_ORIGIN',
    WarningAllObfuscatedCode: 'warning[all]=OBFUSCATED_CODE',
    WarningAllDevtoolsDisabled: 'warning[all]=DEVTOOLS_DISABLED',
    WarningAllWhitelistedDomainCrossOrigin: 'warning[all]=WHITELISTED_DOMAIN_CROSS_ORIGIN',
    WarningAllTrustedBlocklistDomain: 'warning[all]=TRUSTED_BLOCKLIST_DOMAIN',
    WarningAllNonAsciiUrl: 'warning[all]=NON_ASCII_URL',
    WarningEvmBlocklistedDomainCrossOrigin: 'warning[evm]=BLOCKLISTED_DOMAIN_CROSS_ORIGIN',
    WarningEvmObfuscatedCode: 'warning[evm]=OBFUSCATED_CODE',
    WarningEvmDevtoolsDisabled: 'warning[evm]=DEVTOOLS_DISABLED',
    WarningEvmWhitelistedDomainCrossOrigin: 'warning[evm]=WHITELISTED_DOMAIN_CROSS_ORIGIN',
    WarningEvmTrustedBlocklistDomain: 'warning[evm]=TRUSTED_BLOCKLIST_DOMAIN',
    WarningSolanaNonAsciiUrl: 'warning[solana]=NON_ASCII_URL',
    WarningSolanaBlocklistedDomainCrossOrigin: 'warning[solana]=BLOCKLISTED_DOMAIN_CROSS_ORIGIN',
    WarningSolanaObfuscatedCode: 'warning[solana]=OBFUSCATED_CODE',
    WarningSolanaDevtoolsDisabled: 'warning[solana]=DEVTOOLS_DISABLED',
    WarningSolanaWhitelistedDomainCrossOrigin: 'warning[solana]=WHITELISTED_DOMAIN_CROSS_ORIGIN',
    WarningSolanaTrustedBlocklistDomain: 'warning[solana]=TRUSTED_BLOCKLIST_DOMAIN',
    SourceblowfishBlocklist: 'source=blowfish_blocklist',
    SourceblowfishWhitelist: 'source=blowfish_whitelist',
    SourcemetamaskBlocklist: 'source=metamask_blocklist',
    SourcemetamaskWhitelist: 'source=metamask_whitelist',
    SourcephishfortBlocklist: 'source=phishfort_blocklist',
    SourcescamsnifferBlocklist: 'source=scamsniffer_blocklist',
    SourcephantomBlocklist: 'source=phantom_blocklist',
    SourcesolflareBlocklist: 'source=solflare_blocklist',
    SourcedefiLlamaWhitelist: 'source=defi_llama_whitelist',
    SourcebrandWhitelist: 'source=brand_whitelist',
    CopyCatbrandNamedomain: 'copy_cat=brand_name:domain'
} as const;
export type ScanDomain200ResponseInnerLabelsEnum = typeof ScanDomain200ResponseInnerLabelsEnum[keyof typeof ScanDomain200ResponseInnerLabelsEnum];


/**
 * Check if a given object implements the ScanDomain200ResponseInner interface.
 */
export function instanceOfScanDomain200ResponseInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "riskScore" in value;
    isInstance = isInstance && "labels" in value;

    return isInstance;
}

export function ScanDomain200ResponseInnerFromJSON(json: any): ScanDomain200ResponseInner {
    return ScanDomain200ResponseInnerFromJSONTyped(json, false);
}

export function ScanDomain200ResponseInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanDomain200ResponseInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'domain': json['domain'],
        'status': json['status'],
        'riskScore': json['riskScore'],
        'labels': json['labels'],
    };
}

export function ScanDomain200ResponseInnerToJSON(value?: ScanDomain200ResponseInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domain': value.domain,
        'status': value.status,
        'riskScore': value.riskScore,
        'labels': value.labels,
    };
}

