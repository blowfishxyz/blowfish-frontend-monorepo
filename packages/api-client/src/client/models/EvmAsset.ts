/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetPrice } from './AssetPrice';
import {
    AssetPriceFromJSON,
    AssetPriceFromJSONTyped,
    AssetPriceToJSON,
} from './AssetPrice';

/**
 * 
 * @export
 * @interface EvmAsset
 */
export interface EvmAsset {
    /**
     * The contract address of the asset
     * @type {string}
     * @memberof EvmAsset
     */
    address: string;
    /**
     * The symbol of the asset
     * @type {string}
     * @memberof EvmAsset
     */
    symbol: string;
    /**
     * The name of the asset
     * @type {string}
     * @memberof EvmAsset
     */
    name: string;
    /**
     * The number of decimal places used by the asset
     * @type {number}
     * @memberof EvmAsset
     */
    decimals: number;
    /**
     * Whether the asset is verified as safe
     * @type {boolean}
     * @memberof EvmAsset
     */
    verified: boolean;
    /**
     * The trusted token lists on which this asset is listed
     * @type {Array<string>}
     * @memberof EvmAsset
     */
    lists: Array<EvmAssetListsEnum>;
    /**
     * The URL of the asset's image. Can be `null`.
     * @type {string}
     * @memberof EvmAsset
     */
    imageUrl: string | null;
    /**
     * 
     * @type {AssetPrice}
     * @memberof EvmAsset
     */
    price: AssetPrice | null;
}


/**
 * @export
 */
export const EvmAssetListsEnum = {
    Coingecko: 'COINGECKO',
    Zerion: 'ZERION',
    OneInch: 'ONE_INCH',
    Uniswap: 'UNISWAP',
    MyCryptoApi: 'MY_CRYPTO_API',
    KlerosTokens: 'KLEROS_TOKENS',
    PolygonPopularTokens: 'POLYGON_POPULAR_TOKENS',
    EvmNative: 'EVM_NATIVE'
} as const;
export type EvmAssetListsEnum = typeof EvmAssetListsEnum[keyof typeof EvmAssetListsEnum];


/**
 * Check if a given object implements the EvmAsset interface.
 */
export function instanceOfEvmAsset(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "verified" in value;
    isInstance = isInstance && "lists" in value;
    isInstance = isInstance && "imageUrl" in value;
    isInstance = isInstance && "price" in value;

    return isInstance;
}

export function EvmAssetFromJSON(json: any): EvmAsset {
    return EvmAssetFromJSONTyped(json, false);
}

export function EvmAssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvmAsset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'symbol': json['symbol'],
        'name': json['name'],
        'decimals': json['decimals'],
        'verified': json['verified'],
        'lists': json['lists'],
        'imageUrl': json['imageUrl'],
        'price': AssetPriceFromJSON(json['price']),
    };
}

export function EvmAssetToJSON(value?: EvmAsset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'symbol': value.symbol,
        'name': value.name,
        'decimals': value.decimals,
        'verified': value.verified,
        'lists': value.lists,
        'imageUrl': value.imageUrl,
        'price': AssetPriceToJSON(value.price),
    };
}

