/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A nullable error object which includes the parsed simulation error encountered (if any)
 * @export
 * @interface ScanMessageEvm200ResponseSimulationResultsError
 */
export interface ScanMessageEvm200ResponseSimulationResultsError {
    /**
     * A unique representation of the error kind
     * 
     * UNSUPPORTED_ORDER_TYPE: Opensea order simulation currently supports basic order types for swapping ERC20/721/1155 <-> ERC20/721/1155, advanced order types using attribute criteria are not supported. If the message is a valid OpenSea order but of a type not supported UNSUPPORTED_ORDER_TYPE will be returned
     * 
     * UNKNOWN_ERROR: We were not able to simulate the state changes of the message for an unknown reason, however the transaction it self did not revert so the user can proceed with caution
     * 
     * UNSUPPORTED_MESSAGE: We do not support decoding this message type.
     * @type {string}
     * @memberof ScanMessageEvm200ResponseSimulationResultsError
     */
    kind: ScanMessageEvm200ResponseSimulationResultsErrorKindEnum;
    /**
     * Human readable & translated string that can be directly exposed to end-users
     * @type {string}
     * @memberof ScanMessageEvm200ResponseSimulationResultsError
     */
    humanReadableError: string;
}


/**
 * @export
 */
export const ScanMessageEvm200ResponseSimulationResultsErrorKindEnum = {
    UnsupportedOrderType: 'UNSUPPORTED_ORDER_TYPE',
    UnknownError: 'UNKNOWN_ERROR',
    UnsupportedMessage: 'UNSUPPORTED_MESSAGE'
} as const;
export type ScanMessageEvm200ResponseSimulationResultsErrorKindEnum = typeof ScanMessageEvm200ResponseSimulationResultsErrorKindEnum[keyof typeof ScanMessageEvm200ResponseSimulationResultsErrorKindEnum];


/**
 * Check if a given object implements the ScanMessageEvm200ResponseSimulationResultsError interface.
 */
export function instanceOfScanMessageEvm200ResponseSimulationResultsError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "humanReadableError" in value;

    return isInstance;
}

export function ScanMessageEvm200ResponseSimulationResultsErrorFromJSON(json: any): ScanMessageEvm200ResponseSimulationResultsError {
    return ScanMessageEvm200ResponseSimulationResultsErrorFromJSONTyped(json, false);
}

export function ScanMessageEvm200ResponseSimulationResultsErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanMessageEvm200ResponseSimulationResultsError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': json['kind'],
        'humanReadableError': json['humanReadableError'],
    };
}

export function ScanMessageEvm200ResponseSimulationResultsErrorToJSON(value?: ScanMessageEvm200ResponseSimulationResultsError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': value.kind,
        'humanReadableError': value.humanReadableError,
    };
}

