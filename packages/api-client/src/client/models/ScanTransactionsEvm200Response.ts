/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionEnum } from './ActionEnum';
import {
    ActionEnumFromJSON,
    ActionEnumFromJSONTyped,
    ActionEnumToJSON,
} from './ActionEnum';
import type { ScanTransactionsEvm200ResponseSimulationResults } from './ScanTransactionsEvm200ResponseSimulationResults';
import {
    ScanTransactionsEvm200ResponseSimulationResultsFromJSON,
    ScanTransactionsEvm200ResponseSimulationResultsFromJSONTyped,
    ScanTransactionsEvm200ResponseSimulationResultsToJSON,
} from './ScanTransactionsEvm200ResponseSimulationResults';
import type { WarningInner } from './WarningInner';
import {
    WarningInnerFromJSON,
    WarningInnerFromJSONTyped,
    WarningInnerToJSON,
} from './WarningInner';

/**
 * 
 * @export
 * @interface ScanTransactionsEvm200Response
 */
export interface ScanTransactionsEvm200Response {
    /**
     * 
     * @type {ActionEnum}
     * @memberof ScanTransactionsEvm200Response
     */
    action: ActionEnum;
    /**
     * An array of warnings generated from scanning the transactions. All these warnings won't be returned in a single response (some are mutually exclusive) but it is advisable that your UI can display multiple warnings. Warnings are returned sorted by severity, so if you can only show a user one warning, show them the one at the 0th index.
     * @type {Array<WarningInner>}
     * @memberof ScanTransactionsEvm200Response
     */
    warnings: Array<WarningInner>;
    /**
     * 
     * @type {ScanTransactionsEvm200ResponseSimulationResults}
     * @memberof ScanTransactionsEvm200Response
     */
    simulationResults: ScanTransactionsEvm200ResponseSimulationResults;
}

/**
 * Check if a given object implements the ScanTransactionsEvm200Response interface.
 */
export function instanceOfScanTransactionsEvm200Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "warnings" in value;
    isInstance = isInstance && "simulationResults" in value;

    return isInstance;
}

export function ScanTransactionsEvm200ResponseFromJSON(json: any): ScanTransactionsEvm200Response {
    return ScanTransactionsEvm200ResponseFromJSONTyped(json, false);
}

export function ScanTransactionsEvm200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanTransactionsEvm200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': ActionEnumFromJSON(json['action']),
        'warnings': ((json['warnings'] as Array<any>).map(WarningInnerFromJSON)),
        'simulationResults': ScanTransactionsEvm200ResponseSimulationResultsFromJSON(json['simulationResults']),
    };
}

export function ScanTransactionsEvm200ResponseToJSON(value?: ScanTransactionsEvm200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': ActionEnumToJSON(value.action),
        'warnings': ((value.warnings as Array<any>).map(WarningInnerToJSON)),
        'simulationResults': ScanTransactionsEvm200ResponseSimulationResultsToJSON(value.simulationResults),
    };
}

