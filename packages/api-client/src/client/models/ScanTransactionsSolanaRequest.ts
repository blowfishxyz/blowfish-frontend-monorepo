/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RequestMetadata } from './RequestMetadata';
import {
    RequestMetadataFromJSON,
    RequestMetadataFromJSONTyped,
    RequestMetadataToJSON,
} from './RequestMetadata';

/**
 * 
 * @export
 * @interface ScanTransactionsSolanaRequest
 */
export interface ScanTransactionsSolanaRequest {
    /**
     * Base58 or Base64 encoded Solana transactions to scan
     * @type {Array<string>}
     * @memberof ScanTransactionsSolanaRequest
     */
    transactions: Array<string>;
    /**
     * Base58-encoded account of signer of transactions
     * @type {string}
     * @memberof ScanTransactionsSolanaRequest
     */
    userAccount: string;
    /**
     * 
     * @type {RequestMetadata}
     * @memberof ScanTransactionsSolanaRequest
     */
    metadata: RequestMetadata;
}

/**
 * Check if a given object implements the ScanTransactionsSolanaRequest interface.
 */
export function instanceOfScanTransactionsSolanaRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "transactions" in value;
    isInstance = isInstance && "userAccount" in value;
    isInstance = isInstance && "metadata" in value;

    return isInstance;
}

export function ScanTransactionsSolanaRequestFromJSON(json: any): ScanTransactionsSolanaRequest {
    return ScanTransactionsSolanaRequestFromJSONTyped(json, false);
}

export function ScanTransactionsSolanaRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanTransactionsSolanaRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactions': json['transactions'],
        'userAccount': json['userAccount'],
        'metadata': RequestMetadataFromJSON(json['metadata']),
    };
}

export function ScanTransactionsSolanaRequestToJSON(value?: ScanTransactionsSolanaRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactions': value.transactions,
        'userAccount': value.userAccount,
        'metadata': RequestMetadataToJSON(value.metadata),
    };
}

