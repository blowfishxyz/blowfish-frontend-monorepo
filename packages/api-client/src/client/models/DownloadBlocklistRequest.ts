/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DownloadBlocklistRequest
 */
export interface DownloadBlocklistRequest {
    /**
     * Excludes domain from the blocklist if it is present on one of these lists
     * @type {Array<string>}
     * @memberof DownloadBlocklistRequest
     */
    allowLists?: Array<DownloadBlocklistRequestAllowListsEnum>;
    /**
     * Block domain if it is present on one of these lists
     * @type {Array<string>}
     * @memberof DownloadBlocklistRequest
     */
    blockLists?: Array<DownloadBlocklistRequestBlockListsEnum>;
    /**
     * Override domain blocking if domain is present on one of these lists, even if it's block-listed on of regular block lists
     * @type {Array<string>}
     * @memberof DownloadBlocklistRequest
     */
    priorityAllowLists?: Array<DownloadBlocklistRequestPriorityAllowListsEnum>;
    /**
     * Always block domain if it present on one of these lists, even if it's allow-listed on one of regular allow lists
     * @type {Array<string>}
     * @memberof DownloadBlocklistRequest
     */
    priorityBlockLists?: Array<DownloadBlocklistRequestPriorityBlockListsEnum>;
}


/**
 * @export
 */
export const DownloadBlocklistRequestAllowListsEnum = {
    Blowfish: 'BLOWFISH',
    Metamask: 'METAMASK',
    Defillama: 'DEFILLAMA'
} as const;
export type DownloadBlocklistRequestAllowListsEnum = typeof DownloadBlocklistRequestAllowListsEnum[keyof typeof DownloadBlocklistRequestAllowListsEnum];

/**
 * @export
 */
export const DownloadBlocklistRequestBlockListsEnum = {
    Phantom: 'PHANTOM',
    Blowfish: 'BLOWFISH',
    Solfare: 'SOLFARE',
    Phishfort: 'PHISHFORT',
    Scamsniffer: 'SCAMSNIFFER',
    Metamask: 'METAMASK'
} as const;
export type DownloadBlocklistRequestBlockListsEnum = typeof DownloadBlocklistRequestBlockListsEnum[keyof typeof DownloadBlocklistRequestBlockListsEnum];

/**
 * @export
 */
export const DownloadBlocklistRequestPriorityAllowListsEnum = {
    Blowfish: 'BLOWFISH',
    Metamask: 'METAMASK',
    Defillama: 'DEFILLAMA'
} as const;
export type DownloadBlocklistRequestPriorityAllowListsEnum = typeof DownloadBlocklistRequestPriorityAllowListsEnum[keyof typeof DownloadBlocklistRequestPriorityAllowListsEnum];

/**
 * @export
 */
export const DownloadBlocklistRequestPriorityBlockListsEnum = {
    Phantom: 'PHANTOM',
    Blowfish: 'BLOWFISH',
    Solfare: 'SOLFARE',
    Phishfort: 'PHISHFORT',
    Scamsniffer: 'SCAMSNIFFER',
    Metamask: 'METAMASK'
} as const;
export type DownloadBlocklistRequestPriorityBlockListsEnum = typeof DownloadBlocklistRequestPriorityBlockListsEnum[keyof typeof DownloadBlocklistRequestPriorityBlockListsEnum];


/**
 * Check if a given object implements the DownloadBlocklistRequest interface.
 */
export function instanceOfDownloadBlocklistRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DownloadBlocklistRequestFromJSON(json: any): DownloadBlocklistRequest {
    return DownloadBlocklistRequestFromJSONTyped(json, false);
}

export function DownloadBlocklistRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DownloadBlocklistRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowLists': !exists(json, 'allowLists') ? undefined : json['allowLists'],
        'blockLists': !exists(json, 'blockLists') ? undefined : json['blockLists'],
        'priorityAllowLists': !exists(json, 'priorityAllowLists') ? undefined : json['priorityAllowLists'],
        'priorityBlockLists': !exists(json, 'priorityBlockLists') ? undefined : json['priorityBlockLists'],
    };
}

export function DownloadBlocklistRequestToJSON(value?: DownloadBlocklistRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowLists': value.allowLists,
        'blockLists': value.blockLists,
        'priorityAllowLists': value.priorityAllowLists,
        'priorityBlockLists': value.priorityBlockLists,
    };
}

