/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthorities } from './SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthorities';
import {
    SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthoritiesFromJSON,
    SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthoritiesFromJSONTyped,
    SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthoritiesToJSON,
} from './SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthorities';
import type { SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthorities } from './SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthorities';
import {
    SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthoritiesFromJSON,
    SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthoritiesFromJSONTyped,
    SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthoritiesToJSON,
} from './SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthorities';

/**
 * 
 * @export
 * @interface SolanaStateChangeSolStakeAuthorityChangeData
 */
export interface SolanaStateChangeSolStakeAuthorityChangeData {
    /**
     * The stake account address
     * @type {string}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    stakeAccount: string;
    /**
     * 
     * @type {SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthorities}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    currAuthorities: SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthorities;
    /**
     * 
     * @type {SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthorities}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    futureAuthorities: SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthorities;
    /**
     * Symbol of the Solana native token
     * @type {string}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    symbol: string;
    /**
     * Name of the Solana native token
     * @type {string}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    name: string;
    /**
     * Decimals of the Solana native token
     * @type {number}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    decimals: number;
    /**
     * Amount of SOL staked by this account
     * @type {number}
     * @memberof SolanaStateChangeSolStakeAuthorityChangeData
     */
    solStaked: number;
}

/**
 * Check if a given object implements the SolanaStateChangeSolStakeAuthorityChangeData interface.
 */
export function instanceOfSolanaStateChangeSolStakeAuthorityChangeData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "stakeAccount" in value;
    isInstance = isInstance && "currAuthorities" in value;
    isInstance = isInstance && "futureAuthorities" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "solStaked" in value;

    return isInstance;
}

export function SolanaStateChangeSolStakeAuthorityChangeDataFromJSON(json: any): SolanaStateChangeSolStakeAuthorityChangeData {
    return SolanaStateChangeSolStakeAuthorityChangeDataFromJSONTyped(json, false);
}

export function SolanaStateChangeSolStakeAuthorityChangeDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): SolanaStateChangeSolStakeAuthorityChangeData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stakeAccount': json['stakeAccount'],
        'currAuthorities': SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthoritiesFromJSON(json['currAuthorities']),
        'futureAuthorities': SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthoritiesFromJSON(json['futureAuthorities']),
        'symbol': json['symbol'],
        'name': json['name'],
        'decimals': json['decimals'],
        'solStaked': json['solStaked'],
    };
}

export function SolanaStateChangeSolStakeAuthorityChangeDataToJSON(value?: SolanaStateChangeSolStakeAuthorityChangeData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stakeAccount': value.stakeAccount,
        'currAuthorities': SolanaStateChangeSolStakeAuthorityChangeDataCurrAuthoritiesToJSON(value.currAuthorities),
        'futureAuthorities': SolanaStateChangeSolStakeAuthorityChangeDataFutureAuthoritiesToJSON(value.futureAuthorities),
        'symbol': value.symbol,
        'name': value.name,
        'decimals': value.decimals,
        'solStaked': value.solStaked,
    };
}

