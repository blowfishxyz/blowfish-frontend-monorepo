/* tslint:disable */
/* eslint-disable */
/**
 * API reference
 * The Blowfish API reference specification
 *
 * The version of the OpenAPI document: 2022-06-01
 * Contact: contact@blowfish.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WarningInner
 */
export interface WarningInner {
    /**
     * warning severity level. We suggest a yellow message if "WARNING", and a red message if "CRITICAL".
     * @type {string}
     * @memberof WarningInner
     */
    severity: WarningInnerSeverityEnum;
    /**
     * Warning kind. Can be used to override specific warnings with your own custom versions. We reserve the right to add new warnings as the need arises, so your UI should likewise defer to the supplied message if the kind isn't recognized by your code.
     * @type {string}
     * @memberof WarningInner
     */
    kind: WarningInnerKindEnum;
    /**
     * human-readable message to present to the end-user
     * @type {string}
     * @memberof WarningInner
     */
    message: string;
}


/**
 * @export
 */
export const WarningInnerSeverityEnum = {
    Critical: 'CRITICAL',
    Warning: 'WARNING'
} as const;
export type WarningInnerSeverityEnum = typeof WarningInnerSeverityEnum[keyof typeof WarningInnerSeverityEnum];

/**
 * @export
 */
export const WarningInnerKindEnum = {
    SuspectedMalicious: 'SUSPECTED_MALICIOUS',
    KnownMalicious: 'KNOWN_MALICIOUS',
    TransferringErc20ToOwnContract: 'TRANSFERRING_ERC20_TO_OWN_CONTRACT',
    UnlimitedAllowanceToNfts: 'UNLIMITED_ALLOWANCE_TO_NFTS',
    BulkApprovalsRequest: 'BULK_APPROVALS_REQUEST',
    SetOwnerAuthority: 'SET_OWNER_AUTHORITY',
    TrustedBlocklistDomain: 'TRUSTED_BLOCKLIST_DOMAIN',
    SemiTrustedBlocklistDomain: 'SEMI_TRUSTED_BLOCKLIST_DOMAIN',
    DanglingApproval: 'DANGLING_APPROVAL',
    TradeForNothing: 'TRADE_FOR_NOTHING',
    PermitUnlimitedAllowance: 'PERMIT_UNLIMITED_ALLOWANCE',
    PermitNoExpiration: 'PERMIT_NO_EXPIRATION',
    EthSignTxHash: 'ETH_SIGN_TX_HASH',
    ObfuscatedCode: 'OBFUSCATED_CODE',
    DevtoolsDisabled: 'DEVTOOLS_DISABLED',
    BlocklistedDomainCrossOrigin: 'BLOCKLISTED_DOMAIN_CROSS_ORIGIN',
    WhitelistedDomainCrossOrigin: 'WHITELISTED_DOMAIN_CROSS_ORIGIN',
    TooManyTransactions: 'TOO_MANY_TRANSACTIONS',
    NonAsciiUrl: 'NON_ASCII_URL',
    CompromisedAuthorityUpgrade: 'COMPROMISED_AUTHORITY_UPGRADE',
    PoisonedAddress: 'POISONED_ADDRESS',
    ApprovalToEOA: 'APPROVAL_TO_E_O_A',
    CopyCatDomain: 'COPY_CAT_DOMAIN'
} as const;
export type WarningInnerKindEnum = typeof WarningInnerKindEnum[keyof typeof WarningInnerKindEnum];


/**
 * Check if a given object implements the WarningInner interface.
 */
export function instanceOfWarningInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "severity" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function WarningInnerFromJSON(json: any): WarningInner {
    return WarningInnerFromJSONTyped(json, false);
}

export function WarningInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): WarningInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'severity': json['severity'],
        'kind': json['kind'],
        'message': json['message'],
    };
}

export function WarningInnerToJSON(value?: WarningInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'severity': value.severity,
        'kind': value.kind,
        'message': value.message,
    };
}

